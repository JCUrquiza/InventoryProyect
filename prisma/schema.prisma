// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
// Ejecutar migraci√≥n: npx prisma migrate dev --name init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model position {
  id   Int    @id @default(autoincrement())
  name String

  // Relations
  users users[]
}

model functionality {
  id   Int    @id @default(autoincrement())
  name String

  // Relatons
  actions actions[]
}

model actions {
  id Int @id @default(autoincrement())

  // Relations
  users  users @relation(fields: [userId], references: [id])
  userId Int

  functionality   functionality @relation(fields: [functionalityId], references: [id])
  functionalityId Int
}

model users {
  id       Int    @id @default(autoincrement())
  name     String
  email    String @unique
  password String

  // Relations
  position   position @relation(fields: [positionId], references: [id])
  positionId Int

  // Relations
  tickets         tickets[]
  firstDocuments  firstDocuments[]
  secondDocuments secondDocuments[]
  actions         actions[]
}

model company {
  id      Int    @id @default(autoincrement())
  name    String
  email   String
  address String

  // Relations
  branchOffices branchOffices[]
}

model branchOffices {
  id      Int    @id @default(autoincrement())
  name    String
  address String
  email   String
  state   String

  company   company @relation(fields: [companyId], references: [id])
  companyId Int

  // Relations
  warehousesByBranch warehousesByBranch[]
  customers          customers[]
}

model wareHouses {
  id   Int    @id @default(autoincrement())
  name String

  // Relations
  warehousesByBranch warehousesByBranch[]
}

model warehousesByBranch {
  id Int @id @default(autoincrement())

  branchOffices   branchOffices @relation(fields: [branchOfficesId], references: [id])
  branchOfficesId Int

  wareHouses   wareHouses @relation(fields: [wareHousesId], references: [id])
  wareHousesId Int

  // Relations
  productsInWarehouses productsInWarehouses[]
}

model productFamily {
  id   Int    @id @default(autoincrement())
  name String

  // Relations
  products products[]
}

model products {
  id        Int     @id @default(autoincrement())
  name      String
  codigoSKU String
  salePrice Decimal

  productFamily   productFamily @relation(fields: [productFamilyId], references: [id])
  productFamilyId Int

  // Relations
  productsInWarehouses productsInWarehouses[]
}

model productsInWarehouses {
  id       Int @id @default(autoincrement())
  quantity Int

  products   products @relation(fields: [productsId], references: [id])
  productsId Int

  warehousesByBranch   warehousesByBranch @relation(fields: [warehousesByBranchId], references: [id])
  warehousesByBranchId Int

  @@unique([warehousesByBranchId, productsId]) // Indice compuesto
}

model status {
  id    Int    @id @default(autoincrement())
  name  String
  code  String
  color String

  // Relations
  tickets         tickets[]
  customers       customers[]
  firstDocuments  firstDocuments[]
  secondDocuments secondDocuments[]
}

model catalogue {
  id     Int    @id @default(autoincrement())
  name   String
  module String

  // Relations
  tickets         tickets[]
  firstDocuments  firstDocuments[]
  secondDocuments secondDocuments[]
}

model tickets {
  id          Int      @id @default(autoincrement())
  description String
  date        DateTime

  catalogue   catalogue @relation(fields: [catalogueId], references: [id])
  catalogueId Int

  status   status @relation(fields: [statusId], references: [id])
  statusId Int

  users   users @relation(fields: [usersId], references: [id])
  usersId Int
}

model typeCustomer {
  id   Int    @id @default(autoincrement())
  name String

  // Relations
  customers customers[]
}

model customers {
  id              Int    @id @default(autoincrement())
  name            String
  apellidoPaterno String
  apellidoMaterno String
  email           String
  address         String
  telephone       String

  typeCustomer   typeCustomer @relation(fields: [typeCustomerId], references: [id])
  typeCustomerId Int

  branchOffice   branchOffices @relation(fields: [branchOfficeId], references: [id])
  branchOfficeId Int

  status   status @relation(fields: [statusId], references: [id])
  statusId Int

  // Relations
  firstDocuments  firstDocuments[]
  secondDocuments secondDocuments[]
}

model firstDocuments {
  id                Int      @id @default(autoincrement())
  dateAutorizaition DateTime

  customers  customers @relation(fields: [customerId], references: [id])
  customerId Int

  catalogue   catalogue @relation(fields: [catalogueId], references: [id])
  catalogueId Int

  users  users @relation(fields: [userId], references: [id])
  userId Int

  status   status @relation(fields: [statusId], references: [id])
  statusId Int
}

model secondDocuments {
  id               Int      @id @default(autoincrement())
  dateAutorization DateTime

  // Relations
  customers  customers @relation(fields: [customerId], references: [id])
  customerId Int

  catalogue   catalogue @relation(fields: [catalogueId], references: [id])
  catalogueId Int

  users  users @relation(fields: [userId], references: [id])
  userId Int

  status   status @relation(fields: [statusId], references: [id])
  statusId Int
}



